# Generated by Django 5.1.1 on 2024-10-06 08:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dept', models.CharField(choices=[('CSE', 'CSE'), ('CAI', 'CAI'), ('CSD', 'CSD'), ('CSM', 'CSM'), ('CSC', 'CSC'), ('CST', 'CST'), ('ECE', 'ECE'), ('EEE', 'EEE'), ('CE', 'CE'), ('ME', 'ME')], default='CSE', max_length=20)),
                ('groups', models.ManyToManyField(related_name='facultyGroups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='facultyPermissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('roll_no', models.CharField(max_length=12)),
                ('leetcode_user', models.CharField(default='Username', max_length=58)),
                ('dept', models.CharField(choices=[('CSE', 'CSE'), ('CAI', 'CAI'), ('CSD', 'CSD'), ('CSM', 'CSM'), ('CSC', 'CSC'), ('CST', 'CST'), ('ECE', 'ECE'), ('EEE', 'EEE'), ('CE', 'CE'), ('ME', 'ME')], default='CSE', max_length=20)),
                ('section', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F')], default='A', max_length=10)),
                ('year', models.IntegerField(default=3)),
                ('groups', models.ManyToManyField(related_name='studentGroups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='studentPermissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('github_link', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('Initialized', 'Initialized'), ('In_progress', 'In Progress'), ('completed', 'Completed')], default='Initialized', max_length=255)),
                ('rollno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flexapp.student')),
            ],
        ),
        migrations.CreateModel(
            name='LeetCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('TotalProblems', models.IntegerField(default=0)),
                ('easy', models.IntegerField(default=0)),
                ('medium', models.IntegerField(default=0)),
                ('hard', models.IntegerField(default=0)),
                ('rollno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flexapp.student')),
            ],
        ),
        migrations.CreateModel(
            name='ForignLanguages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('certificate', models.FileField(null=True, upload_to='certificates/')),
                ('category', models.CharField(choices=[('technical', 'Technical'), ('foreign_language', 'Foreign Language')], default='technical', max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('course_link', models.URLField(blank=True)),
                ('rollno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flexapp.student')),
            ],
        ),
    ]
